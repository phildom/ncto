#!/bin/ksh

# $Id: ncto,v 1.5 2011/10/03 19:57:17 phil Exp $

# Copyright (c) 2011 Dominik Lang <phildom@lavabit.com>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

# Best viewed with tabstop=8

usage() {
	echo "usage: ncto [-hpV] [-c cipher] -l port [file ...]" 1>&2
	echo "       ncto [-hpV] [-c cipher] host port [file ...]" 1>&2
}

help() {
	echo "Copy files over a network using nc, tar and openssl." 1>&2
	echo "There are two mutually exclusive modes: listen and connect." 1>&2
	echo "By setting \"-l port\" ncto acts as the listening endpoint," 1>&2
	echo "while by setting \"host port\" ncto acts as the connecting" 1>&2
	echo "endpoint. Additionally, ncto takes the role of sender or" 1>&2
	echo "receiver in both modes." 1>&2
	echo "In order to achieve a successful file transfer, a connecting" 1>&2
	echo "endpoint must connect to a listening endpoint. One of the" 1>&2
	echo "two participants must be the sender and the other the" 1>&2
	echo "receiver; this depends on whether files are specified on" 1>&2
	echo "the command line." 1>&2
	echo

	usage

	echo
	echo "options:" 1>&2
	echo "      -c cipher  specify cipher to use for encryption" 1>&2
	echo "      -h         print this help" 1>&2
	echo "      -p         send in plaintext withouth encryption" 1>&2
	echo "      -V         print version and exit" 1>&2
	echo "defaults:" 1>&2
	echo "      encrypt with $cipher" 1>&2
}

check_cipher() {
	# Check if cipher exists
	ciphers=$(openssl list-cipher-commands)
	for c in $ciphers
	do
		if [ "$cipher" = "$c" ]
		then
			match=1
			break;
		fi
	done
	if [ $match = 0 ]
	then
		echo "Specified cipher isn't available." 1>&2
		echo -n "Run following command to check" 1>&2
		echo " which ciphers are available:" 1>&2
		echo "    openssl list-cipher-commands" 1>&2
		exit 1
	fi
}

read_pw() {
	echo -n 'Password: '
	stty -echo
	read pw
	stty echo
	echo
}

if [ $# -lt 1 ] ; then
	usage
	echo "ncto -h prints an explanation of the command" 1>&2
	exit 1
fi

listen=0
match=0
id='$Id: ncto,v 1.5 2011/10/03 19:57:17 phil Exp $'

# Defaults
cipher="rc4"
crypt=1


# I'm doing this by hand and not with getopt(1)
# because file arguments could be filenames with spaces.
# With getopt(1) these filenames will not survive intact
# after the getopt(1) call.
# ops="chlpV"
while [[ $# > 0 && "$1" = \-* ]]
do
	op="$1"
	op="$(echo "X$op" | sed -e 's/^X-//')"

	while [ "$op" ]
	do
		case "$op" in
		c*)
			if [ "$op" = "c"  ]
			then
				shift
				cipher="$1"
				op=""
			else
				cipher="$(echo "$op" | sed -E 's/^c[[:space:]]*//')"
				op=""
			fi
			check_cipher
		;;
		h*)
			help
			exit 0
		;;
		l*)
			if [ "$op" = "l"  ]
			then
				shift
				port="$1"
				op=""
			else
				port="$(echo "$op" | sed -E 's/^l[[:space:]]*//')"
				op=""
			fi

			if [[ "$port" != +([0-9]) ]]
			then
				usage
				exit 1
			fi
			listen=1
		;;
		p*)
			crypt=0
			op="$(echo "$op" | sed -e 's/^p//')"
		;;
		V*)
			echo "$id" | sed -e 's/^.Id://' -e 's/\$$//'
			exit 0
		;;
		*)
			usage
			exit 1
		;;
		esac
	done
	shift
done

# Put the args into an array, so that nc can distinguish between
# its arguments and print a correct error message, if necessary.
if [ $listen = 1 ]
then
	ncargs[0]="-l"
	ncargs[1]="$port"
elif [ $# -ge 2 ]
then
	ip="$1"
	port="$2"
	shift 2
	ncargs[0]="$ip"
	ncargs[1]="$port"
else
	usage
	exit 1
fi

if [ $crypt = 1 ]
then
	if [ $match = 0 ]
	then
		check_cipher
	fi

	read_pw

	if [ $# -gt 0 ]
	then
		tar cvf - "$@" | openssl "$cipher" -e -k "$pw" | nc -O 10000 "${ncargs[@]}"
	else
		nc "${ncargs[@]}" | openssl "$cipher" -d -k "$pw" | tar xvf -
	fi
else
	if [ $# -gt 0 ]
	then
		tar cvf - "$@" | nc -O 10000 "${ncargs[@]}"
	else
		nc "${ncargs[@]}" | tar xvf -
	fi
fi
