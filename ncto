#!/usr/bin/env ksh

# $Id: ncto,v 1.5 2011/10/03 19:57:17 phil Exp $

# Copyright (c) 2011 Dominik Lang <phildom@lavabit.com>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

# Best viewed with tabstop=8

usage() {
	echo "usage: ncto [-hpV] [-c cipher] -l port [file ...]" 1>&2
	echo "       ncto [-hpV] [-c cipher] host port [file ...]" 1>&2
}

help() {
	cat <<EOF 1>&2
Copy files over a network using nc, tar and openssl.
There are two mutually exclusive modes: listen and connect.
By setting \"-l port\" ncto acts as the listening endpoint,
while by setting \"host port\" ncto acts as the connecting
endpoint. Additionally, ncto takes the role of sender or
receiver in both modes.
In order to achieve a successful file transfer, a connecting
endpoint must connect to a listening endpoint. One of the
two participants must be the sender and the other the
receiver; this depends on whether files are specified on
the command line.

EOF
	usage

	cat <<EOF 1>&2

options:
      -c cipher  specify cipher to use for encryption
      -h         print this help
      -p         send in plaintext withouth encryption
      -V         print version and exit
defaults:
      encrypt with $cipher
EOF
}

check_cipher() {
	# Check if cipher exists
	ciphers=$(openssl list-cipher-commands)
	for c in $ciphers
	do
		if [ "$cipher" = "$c" ]; then
			match=1
			break;
		fi
	done
	if [ $match = 0 ]; then
		cat <<EOF 1>&2
Specified cipher isn't available.
Run following command to check which ciphers are available:
      openssl list-cipher-commands
EOF
	exit 1
	fi
}

read_pw() {
	echo -n 'Password: '
	stty -echo
	read pw
	stty echo
	echo
}

if [ $# -lt 1 ]; then
	usage
	echo "ncto -h prints an explanation of the command" 1>&2
	exit 1
fi

listen=0
match=0
id='$Id: ncto,v 1.5 2011/10/03 19:57:17 phil Exp $'

# Defaults
cipher="rc4"
crypt=1


# I'm doing this by hand and not with getopt(1)
# because file arguments could be filenames with spaces.
# With getopt(1) these filenames will not survive intact
# after the getopt(1) call.
# ops="chlpV"
# THINKING about changing to case, so we are sh compliant
while [[ $# > 0 && "$1" = \-* ]]
do
	op="$1"
	op="$(echo "X$op" | sed -e 's/^X-//')"

	while [ "$op" ]
	do
		case "$op" in
		c*)
			if [ "$op" = "c"  ]; then
				shift
				cipher="$1"
				op=""
			else
				cipher="$(echo "$op" | sed -e 's/^c[ 	]*//')"
				op=""
			fi
			check_cipher
		;;
		h*)
			help
			exit 0
		;;
		l*)
			if [ "$op" = "l"  ]; then
				shift
				port="$1"
				op=""
			else
				port="$(echo "$op" | sed -e 's/^l[ 	]*//')"
				op=""
			fi

			if [[ "$port" != +([0-9]) ]]; then
				usage
				exit 1
			fi
			listen=1
		;;
		p*)
			crypt=0
			op="$(echo "$op" | sed -e 's/^p//')"
		;;
		V*)
			echo "$id" | sed -e 's/^.Id://' -e 's/\$$//'
			exit 0
		;;
		*)
			usage
			exit 1
		;;
		esac
	done
	shift
done

# Put the args into an array, so that nc can distinguish between
# its arguments and print a correct error message, if necessary.
# THINKING about using $@ with set
if [ $listen = 1 ]; then
	ncargs[0]="-l"
	ncargs[1]="$port"
elif [ $# -ge 2 ]; then
	ip="$1"
	port="$2"
	shift 2
	ncargs[0]="$ip"
	ncargs[1]="$port"
else
	usage
	exit 1
fi

if [ $crypt = 1 ]; then
	if [ $match = 0 ]; then
		check_cipher
	fi

	read_pw

	if [ $# -gt 0 ]; then
		tar cvf - "$@" | openssl "$cipher" -e -k "$pw" | nc -O 10000 "${ncargs[@]}"
	else
		nc "${ncargs[@]}" | openssl "$cipher" -d -k "$pw" | tar xvf -
	fi
else
	if [ $# -gt 0 ]; then
		tar cvf - "$@" | nc -O 10000 "${ncargs[@]}"
	else
		nc "${ncargs[@]}" | tar xvf -
	fi
fi
